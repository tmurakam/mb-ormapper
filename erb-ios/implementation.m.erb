// DO NOT MODIFY!
// Generated by mb-ormapper generator ver <%= VER %>
// https://github.com/tmurakam/mb-ormapper

#import "Database.h"
#import "<%= cdef.base_class_name %>.h"

@interface <%= cdef.base_class_name %> ()

- (void)_insert;
- (void)_update;
+ (NSString *)tableName;
- (void)_loadRow:(dbstmt *)stmt;
@end

@implementation <%= cdef.base_class_name %>

- (id)init
{
    self = [super init];
    return self;
}

/**
  @brief Migrate database table

  @return YES - table was newly created, NO - table already exists
*/

+ (BOOL)migrate
{
    NSArray *columnTypes = @[
<% cdef.members.each do |m| -%>
        @"<%= m.field_name %>", @"<%= getSqlType(m.type) %>",
<% end -%>
        ];

    return [super migrate:columnTypes primaryKey:@"<%= PKEY %>"];
}

#pragma mark Read operations

/**
  @brief get the record matchs the id

  @param pid Primary key of the record
  @return record
*/
+ (<%= cdef.class_name %> *)find:(NSInteger)pid
{
    Database *db = [Database instance];

    dbstmt *stmt = [db prepare:@"SELECT * FROM <%= cdef.table_name %> WHERE <%= PKEY %> = ?;"];
    [stmt bindInt:0 val:pid];

    return [self find_first_stmt:stmt];
}

<%
  cdef.members.each do |m|
    type, mem = getObjcType(m.type)
-%>
/**
  finder with <%= m.field_name %>

  @param key Key value
  @param cond Conditions (ORDER BY etc)
  @note If you specify WHERE conditions, you must start cond with "AND" keyword.
*/
+ (<%= cdef.class_name %>*)find_by_<%= m.field_name %>:(<%= type %>)key cond:(NSString *)cond
{
    if (cond == nil) {
        cond = @"WHERE <%= m.field_name %> = ? LIMIT 1";
    } else {
        cond = [NSString stringWithFormat:@"WHERE <%= m.field_name %> = ? %@ LIMIT 1", cond];
    }
    dbstmt *stmt = [self gen_stmt:cond];
    [stmt bind<%= getMethodType(m.type) %>:0 val:key];
    return [self find_first_stmt:stmt];
}

+ (<%= cdef.class_name %>*)find_by_<%= m.field_name %>:(<%= type %>)key
{
    return [self find_by_<%= m.field_name %>:key cond:nil];
}

<% end -%>

/**
  Get first record matches the conditions

  @param cond Conditions (WHERE phrase and so on)
  @return array of records
*/
+ (<%= cdef.class_name %> *)find_first:(NSString *)cond
{
    if (cond == nil) {
        cond = @"LIMIT 1";
    } else {
        cond = [cond stringByAppendingString:@" LIMIT 1"];
    }
    dbstmt *stmt = [self gen_stmt:cond];
    return  [self find_first_stmt:stmt];
}

/**
  Get all records match the conditions

  @param cond Conditions (WHERE phrase and so on)
  @return array of records
*/
+ (NSMutableArray *)find_all:(NSString *)cond
{
    dbstmt *stmt = [self gen_stmt:cond];
    return  [self find_all_stmt:stmt];
}

/**
  @brief create dbstmt

  @param s condition
  @return dbstmt
*/
+ (dbstmt *)gen_stmt:(NSString *)cond
{
    NSString *sql;
    if (cond == nil) {
        sql = @"SELECT * FROM <%= cdef.table_name %>;";
    } else {
        sql = [NSString stringWithFormat:@"SELECT * FROM <%= cdef.table_name %> %@;", cond];
    }  
    dbstmt *stmt = [[Database instance] prepare:sql];
    return stmt;
}

/**
  Get first record matches the conditions

  @param stmt Statement
  @return array of records
*/
+ (<%= cdef.class_name %> *)find_first_stmt:(dbstmt *)stmt
{
    if ([stmt step] == SQLITE_ROW) {
        <%= cdef.base_class_name %> *e = [[self class] new];
        [e _loadRow:stmt];
        return (<%= cdef.class_name %> *)e;
    }
    return nil;
}

/**
  Get all records match the conditions

  @param stmt Statement
  @return array of records
*/
+ (NSMutableArray *)find_all_stmt:(dbstmt *)stmt
{
    NSMutableArray *array = [NSMutableArray new];

    while ([stmt step] == SQLITE_ROW) {
        <%= cdef.base_class_name %> *e = [[self class] new];
        [e _loadRow:stmt];
        [array addObject:e];
    }
    return array;
}

- (void)_loadRow:(dbstmt *)stmt
{
    self.pid = [stmt colInt:0];
<%
    i = 1
    cdef.members.each do |m|
      type = m.type
      method = "col" + getMethodType(type)
-%>
    self.<%= m.prop_name %> = [stmt <%= method %>:<%= i %>];
<%    i += 1 -%>
<%  end -%>
}

#pragma mark Create operations

- (void)_insert
{
    [super _insert];

    Database *db = [Database instance];
    dbstmt *stmt;
    
    //[db beginTransaction];
<%
  arglist = ""
  cdef.members.each do |m|
    arglist += ",?"
  end
-%>
    stmt = [db prepare:@"INSERT INTO <%= cdef.table_name %> VALUES(NULL<%= arglist %>);"];
<%
    i = 0
    cdef.members.each do |m|
      method = "bind" + getMethodType(m.type)
-%>
    [stmt <%= method %>:<%= i %> val:<%= m.member_name %>];
<%    i += 1 -%>
<%  end -%>
    [stmt step];

    self.pid = [db lastInsertRowId];

    //[db commitTransaction];

    [[Database instance] setModified];
}

#pragma mark Update operations

- (void)_update
{
    [super _update];

    Database *db = [Database instance];
    //[db beginTransaction];

    dbstmt *stmt = [db prepare:@"UPDATE <%= cdef.table_name %> SET "
<%
  isFirst = true
  cdef.members.each do |m|
    if (isFirst)
      isFirst = false
-%>
        "<%= m.field_name %> = ?"
<%  else -%>
        ",<%= m.field_name %> = ?"
<%  end -%>
<% end -%>
        " WHERE <%= PKEY %> = ?;"];
<% 
    i = 0
    cdef.members.each do |m|
      method = "bind" + getMethodType(m.type)
-%>
    [stmt <%= method %>:<%= i %> val:<%= m.member_name %>];
<%
      i += 1
    end
-%>
    [stmt bindInt:<%= i %> val:self.pid];

    [stmt step];
    //[db commitTransaction];

    [[Database instance] setModified];
}

#pragma mark Delete operations

/**
  @brief Delete record
*/
- (void)delete
{
    Database *db = [Database instance];

    dbstmt *stmt = [db prepare:@"DELETE FROM <%= cdef.table_name %> WHERE <%= PKEY %> = ?;"];
    [stmt bindInt:0 val:self.pid];
    [stmt step];

    [[Database instance] setModified];
}

/**
  @brief Delete all records
*/
+ (void)delete_cond:(NSString *)cond
{
    Database *db = [Database instance];

    if (cond == nil) {
        cond = @"";
    }
    NSString *sql = [NSString stringWithFormat:@"DELETE FROM <%= cdef.table_name %> %@;", cond];
    [db exec:sql];

    [[Database instance] setModified];
}

+ (void)delete_all
{
    [<%= cdef.base_class_name %> delete_cond:nil];
}

/**
 * get table sql
 */
+ (void)getTableSql:(NSMutableString *)s
{
    [s appendString:@"DROP TABLE <%= cdef.table_name %>;\n"];
    [s appendString:@"CREATE TABLE <%= cdef.table_name %> (key INTEGER PRIMARY KEY"];

<% cdef.members.each do |m| -%>
    [s appendFormat:@", <%= m.field_name %> <%= m.type %>"];
<% end -%>    
    [s appendString:@");\n"];

    NSMutableArray *ary = [self find_all:nil];
    for (<%= cdef.base_class_name %> *e in ary) {
        [e getInsertSql:s];
        [s appendString:@"\n"];
    }
}

/**
 * get "INSERT" SQL
 */
- (void)getInsertSql:(NSMutableString *)s
{
    [s appendFormat:@"INSERT INTO <%= cdef.table_name %> VALUES(%ld", (long)self.pid];
<% cdef.members.each do |m| -%>
    [s appendString:@","];
    [s appendString:[self quoteSqlString:<%= getToString(m.type, m.member_name) %>]];
<% end -%>
    [s appendString:@");"];
}

#pragma mark Internal functions

+ (NSString *)tableName
{
    return @"<%= cdef.table_name %>";
}

@end
