// Generated by O/R mapper generator ver 1.2

#import "Database.h"
#import "Person.h"

@implementation Person

@synthesize name = mName;
@synthesize sex = mSex;
@synthesize age = mAge;
@synthesize birthDate = mBirthDate;
@synthesize phoneNumber = mPhoneNumber;

- (id)init
{
    self = [super init];
    return self;
}

/**
  @brief Migrate database table

  @return YES - table was newly created, NO - table already exists
*/

+ (BOOL)migrate
{
    NSArray *columnTypes = @[
        @"name", @"TEXT",
        @"sex", @"INTEGER",
        @"age", @"INTEGER",
        @"birth_date", @"DATE",
        @"phone_number", @"TEXT",
        ];

    return [super migrate:columnTypes primaryKey:@"key"];
}

#pragma mark Read operations

/**
  @brief get the record matchs the id

  @param pid Primary key of the record
  @return record
*/
+ (Person *)find:(int)pid
{
    Database *db = [Database instance];

    dbstmt *stmt = [db prepare:@"SELECT * FROM person WHERE key = ?;"];
    [stmt bindInt:0 val:pid];

    return [self find_first_stmt:stmt];
}

/**
  finder with name

  @param key Key value
  @param cond Conditions (ORDER BY etc)
  @note If you specify WHERE conditions, you must start cond with "AND" keyword.
*/
+ (Person*)find_by_name:(NSString*)key cond:(NSString *)cond
{
    if (cond == nil) {
        cond = @"WHERE name = ? LIMIT 1";
    } else {
        cond = [NSString stringWithFormat:@"WHERE name = ? %@ LIMIT 1", cond];
    }
    dbstmt *stmt = [self gen_stmt:cond];
    [stmt bindString:0 val:key];
    return [self find_first_stmt:stmt];
}

+ (Person*)find_by_name:(NSString*)key
{
    return [self find_by_name:key cond:nil];
}

/**
  finder with sex

  @param key Key value
  @param cond Conditions (ORDER BY etc)
  @note If you specify WHERE conditions, you must start cond with "AND" keyword.
*/
+ (Person*)find_by_sex:(int)key cond:(NSString *)cond
{
    if (cond == nil) {
        cond = @"WHERE sex = ? LIMIT 1";
    } else {
        cond = [NSString stringWithFormat:@"WHERE sex = ? %@ LIMIT 1", cond];
    }
    dbstmt *stmt = [self gen_stmt:cond];
    [stmt bindInt:0 val:key];
    return [self find_first_stmt:stmt];
}

+ (Person*)find_by_sex:(int)key
{
    return [self find_by_sex:key cond:nil];
}

/**
  finder with age

  @param key Key value
  @param cond Conditions (ORDER BY etc)
  @note If you specify WHERE conditions, you must start cond with "AND" keyword.
*/
+ (Person*)find_by_age:(int)key cond:(NSString *)cond
{
    if (cond == nil) {
        cond = @"WHERE age = ? LIMIT 1";
    } else {
        cond = [NSString stringWithFormat:@"WHERE age = ? %@ LIMIT 1", cond];
    }
    dbstmt *stmt = [self gen_stmt:cond];
    [stmt bindInt:0 val:key];
    return [self find_first_stmt:stmt];
}

+ (Person*)find_by_age:(int)key
{
    return [self find_by_age:key cond:nil];
}

/**
  finder with birth_date

  @param key Key value
  @param cond Conditions (ORDER BY etc)
  @note If you specify WHERE conditions, you must start cond with "AND" keyword.
*/
+ (Person*)find_by_birth_date:(NSDate*)key cond:(NSString *)cond
{
    if (cond == nil) {
        cond = @"WHERE birth_date = ? LIMIT 1";
    } else {
        cond = [NSString stringWithFormat:@"WHERE birth_date = ? %@ LIMIT 1", cond];
    }
    dbstmt *stmt = [self gen_stmt:cond];
    [stmt bindDate:0 val:key];
    return [self find_first_stmt:stmt];
}

+ (Person*)find_by_birth_date:(NSDate*)key
{
    return [self find_by_birth_date:key cond:nil];
}

/**
  finder with phone_number

  @param key Key value
  @param cond Conditions (ORDER BY etc)
  @note If you specify WHERE conditions, you must start cond with "AND" keyword.
*/
+ (Person*)find_by_phone_number:(NSString*)key cond:(NSString *)cond
{
    if (cond == nil) {
        cond = @"WHERE phone_number = ? LIMIT 1";
    } else {
        cond = [NSString stringWithFormat:@"WHERE phone_number = ? %@ LIMIT 1", cond];
    }
    dbstmt *stmt = [self gen_stmt:cond];
    [stmt bindString:0 val:key];
    return [self find_first_stmt:stmt];
}

+ (Person*)find_by_phone_number:(NSString*)key
{
    return [self find_by_phone_number:key cond:nil];
}


/**
  Get first record matches the conditions

  @param cond Conditions (WHERE phrase and so on)
  @return array of records
*/
+ (Person *)find_first:(NSString *)cond
{
    if (cond == nil) {
        cond = @"LIMIT 1";
    } else {
        cond = [cond stringByAppendingString:@" LIMIT 1"];
    }
    dbstmt *stmt = [self gen_stmt:cond];
    return  [self find_first_stmt:stmt];
}

/**
  Get all records match the conditions

  @param cond Conditions (WHERE phrase and so on)
  @return array of records
*/
+ (NSMutableArray *)find_all:(NSString *)cond
{
    dbstmt *stmt = [self gen_stmt:cond];
    return  [self find_all_stmt:stmt];
}

/**
  @brief create dbstmt

  @param s condition
  @return dbstmt
*/
+ (dbstmt *)gen_stmt:(NSString *)cond
{
    NSString *sql;
    if (cond == nil) {
        sql = @"SELECT * FROM person;";
    } else {
        sql = [NSString stringWithFormat:@"SELECT * FROM person %@;", cond];
    }  
    dbstmt *stmt = [[Database instance] prepare:sql];
    return stmt;
}

/**
  Get first record matches the conditions

  @param stmt Statement
  @return array of records
*/
+ (Person *)find_first_stmt:(dbstmt *)stmt
{
    if ([stmt step] == SQLITE_ROW) {
        Person *e = [[self class] new];
        [e _loadRow:stmt];
        return (Person *)e;
    }
    return nil;
}

/**
  Get all records match the conditions

  @param stmt Statement
  @return array of records
*/
+ (NSMutableArray *)find_all_stmt:(dbstmt *)stmt
{
    NSMutableArray *array = [NSMutableArray new];

    while ([stmt step] == SQLITE_ROW) {
        Person *e = [[[self class] alloc] init];
        [e _loadRow:stmt];
        [array addObject:e];
    }
    return array;
}

- (void)_loadRow:(dbstmt *)stmt
{
    self.pid = [stmt colInt:0];
    self.name = [stmt colString:1];
    self.sex = [stmt colInt:2];
    self.age = [stmt colInt:3];
    self.birthDate = [stmt colDate:4];
    self.phoneNumber = [stmt colString:5];
}

#pragma mark Create operations

- (void)_insert
{
    [super _insert];

    Database *db = [Database instance];
    dbstmt *stmt;
    
    //[db beginTransaction];
    stmt = [db prepare:@"INSERT INTO person VALUES(NULL,?,?,?,?,?);"];
    [stmt bindString:0 val:mName];
    [stmt bindInt:1 val:mSex];
    [stmt bindInt:2 val:mAge];
    [stmt bindDate:3 val:mBirthDate];
    [stmt bindString:4 val:mPhoneNumber];
    [stmt step];

    self.pid = [db lastInsertRowId];

    //[db commitTransaction];

    [[Database instance] setModified];
}

#pragma mark Update operations

- (void)_update
{
    [super _update];

    Database *db = [Database instance];
    //[db beginTransaction];

    dbstmt *stmt = [db prepare:@"UPDATE person SET "
        "name = ?"
        ",sex = ?"
        ",age = ?"
        ",birth_date = ?"
        ",phone_number = ?"
        " WHERE key = ?;"];
    [stmt bindString:0 val:mName];
    [stmt bindInt:1 val:mSex];
    [stmt bindInt:2 val:mAge];
    [stmt bindDate:3 val:mBirthDate];
    [stmt bindString:4 val:mPhoneNumber];
    [stmt bindInt:5 val:mPid];

    [stmt step];
    //[db commitTransaction];

    [[Database instance] setModified];
}

#pragma mark Delete operations

/**
  @brief Delete record
*/
- (void)delete
{
    Database *db = [Database instance];

    dbstmt *stmt = [db prepare:@"DELETE FROM person WHERE key = ?;"];
    [stmt bindInt:0 val:mPid];
    [stmt step];

    [[Database instance] setModified];
}

/**
  @brief Delete all records
*/
+ (void)delete_cond:(NSString *)cond
{
    Database *db = [Database instance];

    if (cond == nil) {
        cond = @"";
    }
    NSString *sql = [NSString stringWithFormat:@"DELETE FROM person %@;", cond];
    [db exec:sql];

    [[Database instance] setModified];
}

+ (void)delete_all
{
    [Person delete_cond:nil];
}

/**
 * get table sql
 */
+ (void)getTableSql:(NSMutableString *)s
{
    [s appendString:@"DROP TABLE person;\n"];
    [s appendString:@"CREATE TABLE person (key INTEGER PRIMARY KEY"];

    [s appendFormat:@", name TEXT"];
    [s appendFormat:@", sex INTEGER"];
    [s appendFormat:@", age INTEGER"];
    [s appendFormat:@", birth_date DATE"];
    [s appendFormat:@", phone_number TEXT"];
    
    [s appendString:@");\n"];

    NSMutableArray *ary = [self find_all:nil];
    for (Person *e in ary) {
        [e getInsertSql:s];
        [s appendString:@"\n"];
    }
}

/**
 * get "INSERT" SQL
 */
- (void)getInsertSql:(NSMutableString *)s
{
    [s appendFormat:@"INSERT INTO person VALUES(%d", mPid];
    [s appendString:@","];
    [s appendString:[self quoteSqlString:mName]];
    [s appendString:@","];
    [s appendString:[self quoteSqlString:[NSString stringWithFormat:@"%d", mSex]]];
    [s appendString:@","];
    [s appendString:[self quoteSqlString:[NSString stringWithFormat:@"%d", mAge]]];
    [s appendString:@","];
    [s appendString:[self quoteSqlString:[[Database instance] stringFromDate:mBirthDate]]];
    [s appendString:@","];
    [s appendString:[self quoteSqlString:mPhoneNumber]];
    [s appendString:@");"];
}

#pragma mark Internal functions

+ (NSString *)tableName
{
    return @"person";
}

@end
