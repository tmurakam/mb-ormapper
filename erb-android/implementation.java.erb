// DO NOT MODIFY!
// Generated by mb-ormapper generator ver <%= VER %>.
// https://github.com/tmurakam/mb-ormapper

package <%= PKGNAME %>;

import org.tmurakam.ormapper.ORDatabase;
import org.tmurakam.ormapper.ORRecord;
import org.tmurakam.ormapper.ORQuery;

import android.content.ContentValues;
import android.database.*;
import android.database.sqlite.*;
import android.util.Log;

import java.util.*;
import java.io.*;

public class <%= cdef.base_class_name %> extends ORRecord {
    private final static String TAG = "<%= cdef.base_class_name %>";

    protected final static String TABLE_NAME = "<%= cdef.table_name %>";
    protected final static String PKEY_NAME = "<%= PKEY %>";

    public static class Field {
<% cdef.members.each do |m| -%>
        public final static String <%= m.field_name.upcase %> = "<%= m.field_name %>";
<% end -%>
    };

    protected final static String[] COLUMN_TYPES = {
<% cdef.members.each do |m| -%>
        "<%= m.field_name %>", "<%= getSqlType(m.type) %>",
<% end -%>
    };

<%
  # declare member variables
  cdef.members.each do |m|
    type = getJavaType(m.type)
-%>
    protected <%= type %> <%= m.member_name %>;
<% end -%>

    // getter / setter
<%
  # declare getter / setter
  cdef.members.each do |m|
    type = getJavaType(m.type)
-%>
    public <%= type %> <%= m.getter %>() {
        return <%=m.member_name%>;
    }

    public void <%= m.setter %>(<%= type %> <%= m.prop_name %>) {
        this.<%= m.member_name %> = <%= m.prop_name %>;
    }
<% end -%>

    /**
     * Migrate database table
     * @return true - table was newly created, false - table already exists
     */
    public static boolean migrate() {
        return migrate(TABLE_NAME, PKEY_NAME, COLUMN_TYPES);
    }

    // Constructor
    public <%= cdef.base_class_name %>() {
        super();
    }

    // Read operations

    /**
     * Get the record matches the id
     * @param pid Primary key of the record
     * @return record
     */
    public static <%= cdef.class_name %> find(int pid) {
        return query().where_eq(PKEY_NAME, Integer.toString(pid)).first();
    }

<%  # find_by finders -%>
<%  cdef.members.each do |m| -%>

    public static <%= cdef.class_name %> find_by_<%= m.field_name %>(<%= getJavaType(m.type) %> key) {
        return query().where("<%= m.field_name %> = ?", <%= getToString(m.type, "key") %>).first();
    }
<% end -%>

    /**
     * get ORQuery
     */
    public static ORQuery<<%= cdef.class_name %>> query() {
        return new ORQuery<<%= cdef.class_name %>>(<%= cdef.class_name %>.class, TABLE_NAME);
    }

    /* shortcuts to ORQuery functions */

    /**
     * Execute query and returns all elements
     * @return elements
     */
    public static List<<%= cdef.class_name %>> all() {
        return query().all();
    }

    /**
     * Execute query and get first element
     * @return first element
     */
    public static <%= cdef.class_name %> first() {
        return query().first();
    }

    /**
     * Set 'WHERE' conditions
     * @param cond conditions
     * @param params parameters for each placeholders
     * @return this
     * @note You can set only 1 where condition.
     */
    public static ORQuery<<%= cdef.class_name %>> where(String cond, String... params) {
        return query().where(cond, params);
    }

    /**
     * Set 'WHERE' conditions
     * @param column column name
     * @param param parameter
     * @return this
     * @note You can set only 1 where condition.
     */
    public static ORQuery<<%= cdef.class_name %>> where_eq(String column, String param) {
        return query().where_eq(column, param);
    }

    /**
     * set 'ORDER BY' parameter
     * @param order ORDER BY parameter string
     * @return this
     */
    public static ORQuery<<%= cdef.class_name %>> order(String order) {
        return query().order(order);
    }

    /**
     * set 'LIMIT' parameter 
     * @param limit parameter
     * @return this
     */
    public static ORQuery<<%= cdef.class_name %>> limit(int limit) {
        return query().limit(limit);
    }

    /* load row columns */
    public void _loadRow(Cursor cursor) {
        this.pid = cursor.getInt(0);

<% 
  i = 1
  cdef.members.each do |m|
    type = m.type
    if (type == "DATE")
-%>
        this.<%= m.member_name %> = ORDatabase.str2date(cursor.getString(<%= i %>));
<%  else -%>
<%   method = getMethodType(type); -%>
        this.<%= m.member_name %> = cursor.get<%= method %>(<%= i %>);
<%
    end
    i+=1
  end
-%>

        isInserted = true;
    }

    // Relations

    // belongs_to
<%
  cdef.belongs_tos.each do |r|
-%>
    public <%= r.class_name %> <%= r.name %>() {
        return <%= r.class_name %>.query().where_eq(PKEY_NAME, this.<%= r.field_getter_name %>()).first();
    }
<%
  end
-%>
    // has_many
<%
  cdef.has_manys.each do |r|
-%>
    public List<<%= r.class_name %>> <%= r.name %>() {
        return <%= r.class_name %>.query().where_eq("<%= r.field_name %>", this.pid).all();
    }
<%
  end
-%>
    // has_one
<%
  cdef.has_ones.each do |r|
-%>
    public <%= r.class_name %> <%= r.name %>() {
        return <%= r.class_name %>.where_eq("<%= r.field_name %>", this.pid).first();
    }
<%
  end
-%>

    // Create operations

    public void insert() {
        super.insert();

        SQLiteDatabase db = ORDatabase.getDB();

        db.beginTransaction();
        try {
            // TODO: pid should be long?
            this.pid = (int)db.insert(TABLE_NAME, PKEY_NAME, getContentValues());
            isInserted = true;
            Log.d(TAG, "<%= cdef.table_name %>.insert : pid = " + pid);

            db.setTransactionSuccessful();
        } finally {
            db.endTransaction();
        }
    }

    // Update operations

    public void update() {
        SQLiteDatabase db = ORDatabase.getDB();
        db.beginTransaction();
        try {
            ContentValues cv = getContentValues();

            String[] whereArgs = {
                Long.toString(pid)
            };
            int n = db.update(TABLE_NAME, cv, PKEY_NAME + " = ?", whereArgs);
            Log.d(TAG, "<%= cdef.table_name %>.update : count = " + n);
            db.setTransactionSuccessful();
        } finally {
            db.endTransaction();
        }
    }

    protected ContentValues getContentValues() {
        ContentValues cv = new ContentValues();

<%
  i = 1
  cdef.members.each do |m|
    if (m.type == "DATE")
-%>
        cv.put("<%= m.field_name %>", ORDatabase.date2str(this.<%= m.member_name %>));
<%  else -%>
        cv.put("<%= m.field_name %>", this.<%= m.member_name %>);
<%  end -%>
<% end -%>

        return cv;
    }

    // Delete operations

    /**
     * Delete this record
     * @return number of rows deleted.
     */
    public int delete() {
        SQLiteDatabase db = ORDatabase.getDB();

        String[] whereArgs = {
            Long.toString(pid)
        };
        int n = db.delete(TABLE_NAME, PKEY_NAME + " = ?", whereArgs);
        //Log.d(TAG, "<%= cdef.table_name %>.delete : n = " + n);
        return n;
    }

    /**
     * Delete records
     * @param where where clause
     * @param whereArgs where arguments
     * @return number of rows deleted.
     */
     public static int delete(String where, String... whereArgs) {
         SQLiteDatabase db = ORDatabase.getDB();
         int n = db.delete(TABLE_NAME, where, whereArgs);
         return n;
    }

    /**
     * Delete all record
     */
    public static void delete_all() {
        delete(null);
    }

    /**
     * get table sql
     */
    public static void getTableSql(Writer wr) throws IOException {
        wr.write(String.format("DROP TABLE %s;\n", TABLE_NAME));
        wr.write(String.format("CREATE TABLE %s (%s INTEGER PRIMARY KEY", TABLE_NAME, PKEY_NAME));

        for (int i = 0; i < COLUMN_TYPES.length / 2; i++) {
            wr.write(String.format(", %s %s", 
                                  COLUMN_TYPES[i*2], COLUMN_TYPES[i*2+1]));
        }
        wr.write(");\n");

        List<<%= cdef.class_name %>> ary = query().all();
        for (<%= cdef.class_name %> e : ary) {
            e.getInsertSql(wr);
            wr.write("\n");
        }
    }

    /**
     * get "INSERT" SQL
     */
    public void getInsertSql(Writer wr) throws IOException {
        wr.write("INSERT INTO ");
        wr.write(TABLE_NAME);
        wr.write(String.format(" VALUES(%d", pid));
<% cdef.members.each do |m| -%>
        wr.write(",");
        wr.write(quoteSqlString(<%= getToString(m.type, m.member_name) %>));
<% end -%>
        wr.write(");");
    }
}
