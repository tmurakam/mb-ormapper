#!/usr/bin/env ruby
#-*-  Mode:ruby; c-basic-offset:4; tab-width:8; indent-tabs-mode:nil -*-
=begin
  O/R Mapper library for Android

  Copyright (c) 2010, Takuya Murakami. All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are
  met:

  1. Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer. 

  2. Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution. 

  3. Neither the name of the project nor the names of its contributors
  may be used to endorse or promote products derived from this software
  without specific prior written permission. 

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
=end

$LOAD_PATH.push(File.expand_path(File.dirname($0)))

require "orschema.rb"

VER = "1.0"

def getJavaType(type)
    case type
        when "INTEGER"
        return "int";
    when "REAL"
        return "double";
    when "TEXT"
        return "String";
    when "DATE"
        return "long";
    else
        puts "#{type} is not supported."
        exit 1
    end
end

def getMethodType(type)
    case type
    when "INTEGER"
        return "Int"
    when "REAL"
        return "Double"
    when "TEXT"
        return "String"
    when "DATE"
        return "Date"
    else
        puts "#{type} not supported"
        exit 1
    end
end

#
# generate implementation
#
def generateImplementation(vers, cdef, fh)
    fh.puts <<EOF
// DO NOT MODIFY!
// Generated by O/R mapper generator ver #{VER}.

package #{vers["PKGNAME"]};

import org.tmurakam.ormapper.ORDatabase;
import org.tmurakam.ormapper.ORRecord;

import android.content.ContentValues;
import android.database.*;
import android.database.sqlite.*;
import android.util.Log;

import java.util.*;

public class #{cdef.bcname} extends ORRecord {
    public final static String TAG = "ORMapper";

    public final static String tableName = "#{cdef.name}";

EOF

    # declare member variables
    cdef.members.each do |m|
        type = getJavaType(m.type)
        fh.puts "    protected #{type} #{m.memberName};"
        fh.puts
    end

    # declare getter / setter
    fh.puts "    // getter / setter"
    cdef.members.each do |m|
        type = getJavaType(m.type)

        fh.puts <<EOF
    public #{type} #{m.getter}() {
        return #{m.memberName};
    }

    public void #{m.setter}(#{type} #{m.propName}) {
        this.#{m.memberName} = #{m.propName};
    }

EOF
    end
    

    fh.puts <<EOF
    /**
     * Migrate database table
     * @return true - table was newly created, false - table already exists
     */
    public static boolean migrate() {
        String[] columnTypes = {
EOF

    cdef.members.each do |m|
        fh.puts "            \"#{m.fieldName}\", \"#{m.type}\","
    end

    fh.puts <<EOF
        };

        return migrate(tableName, columnTypes);
    }

    // Constructor
    public #{cdef.bcname}() {
        super();
    }

    // Read operations

    /**
     * Get all records
     * @return array of all record
     */
    public static List<#{cdef.rcname}> find() {
        return find(null, null);
    }

    /**
     * Get the record matches the id
     * @param pid Primary key of the record
     * @return record
     */
    public #{cdef.rcname} find(int pid) {
        SQLiteDatabase db = ORDatabase.getDB();

        String[] param = {
            Integer.toString(pid)
        };
        Cursor cursor = db.rawQuery("SELECT * FROM " + tableName + " WHERE key = ?;", param);

        #{cdef.rcname} e = null;
        cursor.moveToFirst();
        if (!cursor.isAfterLast()) {
            e = new #{cdef.rcname}();
            e._loadRow(cursor);
        }
        cursor.close();

        return e;
    }

    /**
     * Get all records matches the conditions
     * @param cond Conditions (WHERE phrase and so on)
     * @return array of records
     */
    public static List<#{cdef.rcname}> find(String cond) {
        return find(cond, null);
    }

    /**
     * Get all records match the conditions
     * @param cond Conditions (WHERE phrase and so on)
     * @param params parameters
     * @return array of records
     */
    public static List<#{cdef.rcname}> find(String cond, String[] params) {
        String sql;
        sql = "SELECT * FROM " + tableName;
        if (cond != null) {
            sql += " ";
            sql += cond;
        }
        SQLiteDatabase db = ORDatabase.getDB();
        Cursor cursor = db.rawQuery(sql, params);
        cursor.moveToFirst();

        ArrayList<#{cdef.rcname}> array = new ArrayList<#{cdef.rcname}>();

        while (!cursor.isAfterLast()) {
            #{cdef.rcname} e = new #{cdef.rcname}();
            e._loadRow(cursor);
            array.add(e);
            cursor.moveToNext();
        }
        cursor.close();

        return array;
    }

    protected void _loadRow(Cursor cursor) {
        this.pid = cursor.getInt(0);
EOF

    i = 1
    cdef.members.each do |m|
        type = m.type
        if (type == "DATE")
            fh.puts "        this.#{m.memberName} = ORDatabase.str2date(cursor.getString(#{i}));"
        else    
            method = getMethodType(type);
            fh.puts "        this.#{m.memberName} = cursor.get#{method}(#{i});"
        end
        i+=1
    end

    fh.puts <<EOF

        isInserted = true;
    }

    // Create operations

    public void insert() {
        super.insert();

        SQLiteDatabase db = ORDatabase.getDB();

        db.beginTransaction();
        try {
            // TODO: pid should be long?
            this.pid = (int)db.insert(tableName, "key", getContentValues());
            isInserted = true;
            Log.d(TAG, "#{cdef.name}.insert : pid = " + pid);

            db.setTransactionSuccessful();
        } finally {
            db.endTransaction();
        }
    }

    // Update operations

    public void update() {
        SQLiteDatabase db = ORDatabase.getDB();
        db.beginTransaction();
        try {
            ContentValues cv = getContentValues();

            String[] whereArgs = {
                Long.toString(pid)
            };
            int n = db.update(tableName, cv, "key = ?", whereArgs);
            Log.d(TAG, "#{cdef.name}.update : count = " + n);
            db.setTransactionSuccessful();
        } finally {
            db.endTransaction();
        }
    }

    private ContentValues getContentValues() {
        ContentValues cv = new ContentValues();
EOF

    i = 1
    cdef.members.each do |m|
        if (m.type == "DATE")
            fh.puts "        cv.put(\"#{m.fieldName}\", ORDatabase.date2str(this.#{m.memberName}));"
        else
            fh.puts "        cv.put(\"#{m.fieldName}\", this.#{m.memberName});"
        end
    end

    fh.puts <<EOF

        return cv;
    }

    // Delete operations

    /**
     * Delete this record
     */
    public void delete() {
        SQLiteDatabase db = ORDatabase.getDB();

        String[] whereArgs = {
            Long.toString(pid)
        };
        int n = db.delete(tableName, "key = ?", whereArgs);
        Log.d(TAG, "#{cdef.name}.delete : n = " + n);
    }

    /**
     * Delete records
     * @param cond Conditions
     */
    public static void delete(String cond) {
        SQLiteDatabase db = ORDatabase.getDB();

        if (cond == null) {
            cond = "";
        }
        String sql = "DELETE FROM " + tableName + " " + cond;
        db.execSQL(sql);
    }

    public static void delete_all() {
        delete(null);
    }     
}
EOF

end

##############################################################
# start from here
if (ARGV.size != 1)
    STDERR.puts "usage: #{$0} [deffile]"
    exit 1
end

schema = Schema.new
schema.loadFromFile(ARGV[0])
#schema.dump

# check vers
if (!schema.vers.has_key?("PKGNAME"))
   STDERR.puts "You must declare PKGNAME"
   exit 1
end

# primary key name
if (!schema.vers.has_key?("PKEY"))
    schema.vers["PKEY"] = "key"
end

# output dir
outdir = "."
if (schema.vers.has_key?("OUTDIR"))
    outdir = schema.vers["OUTDIR"]
end

# create output dir
outdir = outdir + "/" + schema.vers["PKGNAME"].gsub(/\./, "/")
system "mkdir -p " + outdir

# generate
schema.defs.each do |cdef|
    path = outdir + "/" + cdef.bcname + ".java"

    STDERR.puts "generate #{path}"
    fh = open(path, "w")
    generateImplementation(schema.vers, cdef, fh)
    fh.close
end
