#!/usr/bin/env ruby

=begin
  O/R Mapper library for iOS

  Copyright (c) 2010-2012, Takuya Murakami. All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are
  met:

  1. Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer. 

  2. Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution. 

  3. Neither the name of the project nor the names of its contributors
  may be used to endorse or promote products derived from this software
  without specific prior written permission. 

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
=end

require 'fileutils'
require 'erb'

ORMDIR = File.expand_path(File.dirname($0))
$LOAD_PATH.push(ORMDIR)

require "orschema.rb"

VER = "1.1"

def getObjcType(type)
  case type
  when "INTEGER"
    return "int", "assign"
  when "REAL"
    return "double", "assign"
  when "TEXT"
    return "NSString*", "retain"
  when "DATE"
    return "NSDate*", "retain"
  else
    puts "#{type} is not supported."
    exit 1
  end
end

def getMethodType(type)
  case type
  when "INTEGER"
    return "Int"
  when "REAL"
    return "Double"
  when "TEXT"
    return "String"
  when "DATE"
    return "Date"
  else
    puts "#{type} not supported"
    exit 1
  end
end

# generate header
def generateHeader(cdef, fh, vers)
  erb = ERB.new(File.read("erb-ios/header.h.erb"), nil, '-')
  fh.puts erb.result(binding)
end

# generate implementation
def generateImplementation(cdef, fh, vers)
<<<<<<< HEAD
    fh.puts <<EOF
// Generated by O/R mapper generator ver #{VER}

#import "Database.h"
#import "#{cdef.baseClassName}.h"

@implementation #{cdef.baseClassName}

EOF

    cdef.members.each do |m|
        fh.puts "@synthesize #{m.propName} = #{m.memberName};"
    end
    fh.puts

    fh.puts <<EOF
- (id)init
{
    self = [super init];
    return self;
}

- (void)dealloc
{
EOF
    
    cdef.members.each do |m|
        type, mem = getObjcType(m.type)
        if (mem == "retain" && !vers["ARC"])
            fh.puts "    [#{m.memberName} release];"
        end
    end
    
    fh.puts <<EOF
    [super dealloc];
}

/**
  @brief Migrate database table

  @return YES - table was newly created, NO - table already exists
*/

+ (BOOL)migrate
{
    NSArray *columnTypes = [NSArray arrayWithObjects:
EOF

    cdef.members.each do |m|
        fh.puts "        @\"#{m.fieldName}\", @\"#{m.type}\","
    end

    fh.puts <<EOF
        nil];

    return [super migrate:columnTypes primaryKey:@"#{vers["PKEY"]}"];
}

#pragma mark Read operations

/**
  @brief get the record matchs the id

  @param pid Primary key of the record
  @return record
*/
+ (#{cdef.className} *)find:(int)pid
{
    Database *db = [Database instance];

    dbstmt *stmt = [db prepare:@"SELECT * FROM #{cdef.tableName} WHERE #{vers["PKEY"]} = ?;"];
    [stmt bindInt:0 val:pid];

    return [self find_first_stmt:stmt];
}

EOF

    cdef.members.each do |m|
        type, mem = getObjcType(m.type)
        fh.puts <<EOF

/**
  finder with #{m.fieldName}

  @param key Key value
  @param cond Conditions (ORDER BY etc)
  @note If you specify WHERE conditions, you must start cond with "AND" keyword.
*/
+ (#{cdef.className}*)find_by_#{m.fieldName}:(#{type})key cond:(NSString *)cond
{
    if (cond == nil) {
        cond = @"WHERE #{m.fieldName} = ? LIMIT 1";
    } else {
        cond = [NSString stringWithFormat:@"WHERE #{m.fieldName} = ? %@ LIMIT 1", cond];
    }
    dbstmt *stmt = [self gen_stmt:cond];
    [stmt bind#{getMethodType(m.type)}:0 val:key];
    return [self find_first_stmt:stmt];
}

+ (#{cdef.className}*)find_by_#{m.fieldName}:(#{type})key
{
    return [self find_by_#{m.fieldName}:key cond:nil];
}
EOF
    end

    fh.puts <<EOF
/**
  Get first record matches the conditions

  @param cond Conditions (WHERE phrase and so on)
  @return array of records
*/
+ (#{cdef.className} *)find_first:(NSString *)cond
{
    if (cond == nil) {
        cond = @"LIMIT 1";
    } else {
        cond = [cond stringByAppendingString:@" LIMIT 1"];
    }
    dbstmt *stmt = [self gen_stmt:cond];
    return  [self find_first_stmt:stmt];
}

/**
  Get all records match the conditions

  @param cond Conditions (WHERE phrase and so on)
  @return array of records
*/
+ (NSMutableArray *)find_all:(NSString *)cond
{
    dbstmt *stmt = [self gen_stmt:cond];
    return  [self find_all_stmt:stmt];
}

/**
  @brief create dbstmt

  @param s condition
  @return dbstmt
*/
+ (dbstmt *)gen_stmt:(NSString *)cond
{
    NSString *sql;
    if (cond == nil) {
        sql = @"SELECT * FROM #{cdef.tableName};";
    } else {
        sql = [NSString stringWithFormat:@"SELECT * FROM #{cdef.tableName} %@;", cond];
    }  
    dbstmt *stmt = [[Database instance] prepare:sql];
    return stmt;
}

/**
  Get first record matches the conditions

  @param stmt Statement
  @return array of records
*/
+ (#{cdef.className} *)find_first_stmt:(dbstmt *)stmt
{
    if ([stmt step] == SQLITE_ROW) {
EOF

    if (vers["ARC"])
        fh.puts <<EOF
        #{cdef.baseClassName} *e = [[self class] new];
EOF
    else
        fh.puts <<EOF
        #{cdef.baseClassName} *e = [[[self class] new] autorelease];
EOF
    end

    fh.puts <<EOF
        [e _loadRow:stmt];
        return (#{cdef.className} *)e;
    }
    return nil;
}

/**
  Get all records match the conditions

  @param stmt Statement
  @return array of records
*/
+ (NSMutableArray *)find_all_stmt:(dbstmt *)stmt
{
EOF
    if (vers["ARC"])
        fh.puts <<EOF
    NSMutableArray *array = [NSMutableArray new];
EOF
    else
        fh.puts <<EOF
    NSMutableArray *array = [[NSMutableArray new] autorelease];
EOF
    end

    fh.puts <<EOF
    while ([stmt step] == SQLITE_ROW) {
        #{cdef.baseClassName} *e = [[[self class] alloc] init];
        [e _loadRow:stmt];
        [array addObject:e];
EOF
    if (!vers["ARC"])
        fh.puts <<EOF
        [e release];
EOF
    end

    fh.puts <<EOF
    }
    return array;
}

- (void)_loadRow:(dbstmt *)stmt
{
    self.pid = [stmt colInt:0];
EOF

    i = 1
    cdef.members.each do |m|
        type = m.type
        method = "col" + getMethodType(type)
        fh.puts "    self.#{m.propName} = [stmt #{method}:#{i}];"
        i += 1
    end
    
    fh.puts <<EOF
}

#pragma mark Create operations

- (void)_insert
{
    [super _insert];

    Database *db = [Database instance];
    dbstmt *stmt;
    
    //[db beginTransaction];
EOF

    fh.print "    stmt = [db prepare:@\"INSERT INTO #{cdef.tableName} VALUES(NULL"
    cdef.members.each do |m|
        fh.print ",?"
    end
    fh.print ");\"];\n"
    fh.puts

    i = 0
    cdef.members.each do |m|
        method = "bind" + getMethodType(m.type)
        fh.puts "    [stmt #{method}:#{i} val:#{m.memberName}];"
        i += 1
    end

    fh.puts <<EOF
    [stmt step];

    self.pid = [db lastInsertRowId];

    //[db commitTransaction];
}

#pragma mark Update operations

- (void)_update
{
    [super _update];

    Database *db = [Database instance];
    //[db beginTransaction];

    dbstmt *stmt = [db prepare:@"UPDATE #{cdef.tableName} SET "
EOF

    isFirst = true
    cdef.members.each do |m|
        fh.print "        \""
        if (isFirst)
            isFirst = false
        else
            fh.print ","
        end
        fh.puts "#{m.fieldName} = ?\""
    end
    
    fh.puts "        \" WHERE #{vers["PKEY"]} = ?;\"];"

    i = 0
    cdef.members.each do |m|
        method = "bind" + getMethodType(m.type)
        fh.puts "    [stmt #{method}:#{i} val:#{m.memberName}];"
        i += 1
    end
    fh.puts <<EOF
    [stmt bindInt:#{i} val:mPid];

    [stmt step];
    //[db commitTransaction];
}

#pragma mark Delete operations

/**
  @brief Delete record
*/
- (void)delete
{
    Database *db = [Database instance];

    dbstmt *stmt = [db prepare:@"DELETE FROM #{cdef.tableName} WHERE #{vers["PKEY"]} = ?;"];
    [stmt bindInt:0 val:mPid];
    [stmt step];
}

/**
  @brief Delete all records
*/
+ (void)delete_cond:(NSString *)cond
{
    Database *db = [Database instance];

    if (cond == nil) {
        cond = @"";
    }
    NSString *sql = [NSString stringWithFormat:@"DELETE FROM #{cdef.tableName} %@;", cond];
    [db exec:sql];
}

+ (void)delete_all
{
    [#{cdef.baseClassName} delete_cond:nil];
}

#pragma mark Internal functions

+ (NSString *)tableName
{
    return @"#{cdef.tableName}";
}

@end
EOF

=======
  erb = ERB.new(File.read("erb-ios/implementation.m.erb"), nil, '-')
  fh.puts erb.result(binding)
>>>>>>> e61ac2c... use erb for ios
end

##############################################################
# start from here
deffile = "schema.def"
if (ARGV.size == 1)
  deffile = ARGV[0]
end

schema = Schema.new
schema.loadFromFile(deffile)
#schema.dump

# primary key name
if (!schema.vers.has_key?("PKEY"))
  schema.vers["PKEY"] = "key"
end

# ARC for iOS
if (!schema.vers.has_key?("ARC") || schema.vers["ARC"] != "false")
  schema.vers["ARC"] = true
else
  schema.vers["ARC"] = false
end

# generate
schema.defs.each do |cdef|
  STDERR.puts "generate #{cdef.baseClassName}.h"
  fh = open(cdef.baseClassName + ".h", "w")
  generateHeader(cdef, fh, schema.vers)
  fh.close

  STDERR.puts "generate #{cdef.baseClassName}.m"
  fh = open(cdef.baseClassName + ".m", "w")
  generateImplementation(cdef, fh, schema.vers)
  fh.close
end

# copy needed files
files = ["ORRecord.h", "ORRecord.m", "Dbstmt.h", "Dbstmt.m",
         "Database.h", "Database.m"]

files.each do |f|
  if (schema.vers["ARC"])
    FileUtils.cp(ORMDIR + "/iOS-ARC/" + f, f)
  else
    FileUtils.cp(ORMDIR + "/iOS/" + f, f)
  end
end
