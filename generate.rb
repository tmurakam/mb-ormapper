#!/usr/bin/ruby

require "schema.rb"

def getObjcType(type)
    case type
    when "TEXT"
        return "NSString*", "retain"
    when "DATE"
        return "NSDate*", "retain"
    when "INTEGER"
        return "int", "assign"
    when "REAL"
        return "double", "assign"
    end

    puts "#{type} is not supported."
    exit 1
end

def getMethodType(type)
    case type
    when "INTEGER"
        return "Int"
    when "REAL"
        return "Double"
    when "TEXT"
        return "String"
    when "DATE"
        return "Date"
    else
        puts "#{type} not supported"
        exit 1
    end
end

# generate header
def generateHeader(cdef, fh)
    fh.puts <<EOF
// generated by generate.rb
#import \"DataModelCommon.h

@interface #{cdef.name} : NSObject {
    int id; // primary key
EOF

    cdef.members.each do |m|
        type, mem = getObjcType(cdef.types[m])
        fh.puts "    #{type} #{m}"
    end

    fh.puts <<EOF
}

@property(nonatomic,assign) int id;
EOF
    
    cdef.members.each do |m|
        type, mem = getObjcType(cdef.types[m])
        fh.puts "@property(nonatomic,#{mem}) #{type} #{m};"
    end

    fh.puts <<EOF

+ (NSMutableArray *)select:(const char *)cond;
+ (#{cdef.name} *)selectWithId:(int)id;
- (void)insert;
- (void)update;
- (void)delete;

- (void)_loadRow:(dbstmt *)stmt;

@end
EOF

end

# generate implementation
def generateImplementation(cdef, fh)
    fh.puts <<EOF
// generated by generate.rb
#import "#{cdef.name}.h"

@implementation #{cdef.name}

@synthesize id;
EOF

    cdef.members.each do |m|
        fh.puts "@synthesize #{m};"
    end
    fh.puts

    fh.puts <<EOF
- (id)init
{
    self = [super init];
    return self;
}

- (void)dealloc
{
EOF
    
    cdef.members.each do |m|
        type, mem = getObjcType(cdef.types[m])
        if (mem == "retain")
            fh.puts "    [#{m} release];"
        end
    end
    
    fh.puts <<EOF
    [super dealloc];
}

+ (void)createTable
{
    Database *db = [Database instance];
    dbstmt *stmt;
    
    stmt = [db prepare:"SELECT sql FROM sqlite_master WHERE type='#{cdef.name}' AND name='#{cdef.name}';"];
    if ([stmt step] != SQLITE_ROW) {
        [db exec:"CREATE TABLE #{cdef.name} ("
            "id INTEGER PRIMARY KEY"
EOF
    
    cdef.members.each do |m|
        fh.puts "            \", #{m} #{cdef.types[m]}\""
    end

    fh.puts <<EOF
            ");"
         ];
    }
}

+ (NSMutableArray *)select:(const char *)cond
{
    NSMutableArray *array = [[[NSMutableArray alloc] init] autorelease];
    Database *db = [Database instance];
    dbstmt *stmt;

    char sql[4096]; // ad hoc
    strcpy(sql, "SELECT * FROM #{cdef.name} ");
    if (cond != 0) {
        strcat(sql, cond);
    }
    strcat(sql, ";");

    stmt = [db prepare:sql];
    while ([stmt step] == SQLITE_ROW) {
        #{cdef.name} e = [[[#{cdef.name} alloc] init] autorelease];
        [e _loadRow:stmt];
        [array addObject:e];
    }
    return array;
}

+ (#{cdef.name} *)selectWithId:(int)id
{
    Database *db = [Database instance];

    dbstmt *stmt = [db prepare:"SELECT * FROM #{cdef.name} WHERE id = ?;"];
    [stmt bindInt:0 val:id];
    if ([stmt step] != SQLITE_ROW) {
        return nil;
    }

    #{cdef.name} e = [[[#{cdef.name} alloc] init] autorelease];
    [e _loadRow:stmt];
 
    return e;
}

- (void)_loadRow:(dbstmt *)stmt
{
    self.id = [stmt colInt:0];
EOF

    i = 1
    cdef.members.each do |m|
        type = cdef.types[m]
        method = "col" + getMethodType(type)
        fh.puts "    self.#{m} = [stmt #{method}:#{i}];"
        i += 1
    end
    
    fh.puts <<EOF
}

- (void)insert
{
    Database *db = [Database instance];
    dbstmt *stmt;
    
    [db beginTransaction];
EOF

    fh.print "    stmt = [db prepare:\"INSERT INTO #{cdef.name} VALUES(NULL"
    cdef.members.each do |m|
        fh.print ",?"
    end
    fh.print ");\"];\n"
    fh.puts

    i = 0
    cdef.members.each do |m|
        method = "bind" + getMethodType(cdef.types[m])
        fh.puts "    [stmt #{method}:#{i} val:#{m}];"
        i += 1
    end

    fh.puts <<EOF
    [stmt step];

    self.id = [db lastInsertRowId];

    [db commitTransaction];
}

- (void)update
{
    Database *db = [Database instance];
    [db beginTransaction];

    dbstmt *stmt = [db prepare:"UPDATE #{cdef.name} SET "
EOF
    cdef.members.each do |m|
        fh.puts "        \"#{m} = ?,\""
    end
    
    fh.puts "        \" WHERE id = ?;\"];"

    i = 0
    cdef.members.each do |m|
        method = "bind" + getMethodType(cdef.types[m])
        fh.puts "    [stmt #{method}:#{i} val:#{m}];"
        i += 1
    end
    fh.puts <<EOF
    [stmt bindInt:#{i} val:id];

    [stmt step];
    [db commitTransaction];
}

- (void)delete
{
    Database *db = [Database instance];

    dbstmt *stmt = [db prepare:"DELETE FROM #{cdef.name} WHERE id = ?;"];
    [stmt bindInt:0 val:id];
    [stmt step];
}

@end
EOF

end

# start from here
if (ARGV.size != 1)
    STDERR.puts "usage: #{$0} [deffile]"
    exit 1
end

schema = Schema.new
schema.loadFromFile(ARGV[0])
#schema.dump

# generate
schema.defs.each do |cdef|
    STDERR.puts "generate #{cdef.name}.h"
    fh = open(cdef.name + ".h", "w")
    generateHeader(cdef, fh)
    fh.close

    STDERR.puts "generate #{cdef.name}.m"
    fh = open(cdef.name + ".m", "w")
    generateImplementation(cdef, fh)
    fh.close
end

        
    
