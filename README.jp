iOS / Android 用 O/R マッパー
=============================

iOS / Android 用の O/R マッパーツールです。
データベース定義 (schema) から自動的にモデルを生成します。

iOS と Android 両対応のアプリを書くときには、特に便利。

ただ、iOS しかアプリ作らない場合は、素直に CoreData を使ったほうが
良いような気がするので、使うのは正直お勧めできないw


モデルの生成手順
----------------

データベース定義のサンプルが sample-schema.def にあります。
以下のようにすることでモデルを生成できます。

iOS の場合:

    $ ./ormapper-ios sample-schema.def

Android の場合:

    $ ./ormapper-android sample-schema.def

生成されたファイルとプロジェクトに追加してください。
また、iOS/Android ディレクトリ内のファイルも適宜追加してください。


使用方法 : iOS の場合
---------------------

最初に以下のようにしてデータベースのインスタンスを生成し、シングルトン
として登録します。そして open を呼び出してデータベースの作成、ロードを
行い、migrate を呼び出してテーブルの作成・マイグレーションを行います。

    Database *db = [[[Database alloc] init] autorelease];
    [Database setInstance:db];

    [db open:@"MyDatabase.db"];
    [db migrate];

テーブルの読み込みにはファインダメソッド群 (find) を使います。
これらのメソッドはモデルの NSMutableArray 配列を返します。

特定の ID を持つレコードを読み出したい場合は find(int pid)
メソッドを使ってください。

レコードの作成、保存を行う場合は、モデルのインスタンスを
生成し、save メソッドを呼ぶだけです。

レコードの削除は delete で行います。

ARCへの対応
-----------

iOS で ARC (Automatic Reference Counting) 対応する場合は、schema.def
ファイルの ARC = false を true に変更してください。

また、iOS/Database.h にある ENABLE_ARC の値を 0 から 1 に変更してくだ
さい。


使用方法 : Android の場合
-------------------------
TBD

schema について
---------------

schema は以下のように記述します

    モデル名: クラス名, 基底クラス名
            型: カラム名
            ...

    モデル名: クラス名, 基底クラス名
            型: カラム名
            ...

「基底クラス名」に指定した名前でモデルクラスが生成されます。
iOSの場合、ファイル名は "基底クラス名.h", "基底クラス名.m" になります。
Androidの場合は"基底クラス名.java" になります。

開発者は、クラス名で指定した名前のクラスを実装する必要があります。
このクラスは、基底クラスを継承して作ります。なお、基底クラスを
継承せずそのまま使用する場合は、以下のように基底クラス名を省略できます。
この場合、基底クラス名はクラス名と同一になります。

    モデル名: クラス名

さらに以下のように基底クラス名を省略することもできます。この場合、
基底クラス名はモデル名と同じになります。

    モデル名

また、SQL テーブル名はモデル名と同じ名前になります。
(RoR のように複数形にしたりはしません)

型には SQLite のデータ型を指定します。今のところサポートしている
型、およびこれに対応する Objective-C、および Java の型は以下の通りです。

    SQL type   Obj-C type    Java type
    -----------------------------------
    INTEGER    int           int
    REAL       double        double
    TEXT       NSString *    String
    DATE (*1)  NSDate *      long (*2)

    *1: 内部的には14桁の文字列("yyyyMMddHHmmss") となる
    *2: 1970/1/1 0:00 UTC からの経過ミリ秒数

カラム名に指定した名前で、モデルクラスのプロパティが自動的に作成
されます。


○ テーブルの migrate について

schema にフィールドを追加した場合、migrate メソッドを呼び出した
ときに自動的にカラムが追加されます。

ただし、既存のフィールドを変更したり途中のフィールドを変更した
場合は対応できませんので、注意してください。


○ ライセンスについて

libs 以下のファイルは BSD ライセンスに準じます。

本ジェネレータで生成されたソースコードについては、ライセンス条件
は一切つきません (Public Domain とお考えください)

○ TODO

- テストクラスの自動生成

